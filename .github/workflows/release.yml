name: Build and Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a new release'
        required: false
        default: 'true'
        type: boolean

jobs:
  build:
    name: Build Release Binaries
    runs-on: windows-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-${{ runner.os }}-
        
      - name: Cache Cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: cargo-build-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-build-${{ runner.os }}-

      - name: Build release binary
        run: cargo build --release

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: learning-programming-app-windows-x64.exe
          path: target/release/learning-programming-app.exe

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.create_release == 'true'))
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Get version from Cargo.toml
        id: version
        shell: bash
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          echo "version=v$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
        
      - name: Check if tag exists
        id: tag_check
        shell: bash
        run: |
          if git rev-parse "${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        
      - name: Download all artifacts
        if: steps.tag_check.outputs.exists == 'false'
        uses: actions/download-artifact@v4
        with:
          path: artifacts
        
      - name: Create binary README
        if: steps.tag_check.outputs.exists == 'false'
        run: |
          cat > BINARY_README.md << 'EOF'
          # Learning Programming App - Binary Release
          （中略 — 既存の README 内容をそのまま使用）
          EOF
        
      - name: Create release
        if: steps.tag_check.outputs.exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body: |
            ## 🚀 Learning Programming App ${{ steps.version.outputs.version }}
            （省略）
          files: |
            artifacts/learning-programming-app-windows-x64.exe/learning-programming-app.exe
            BINARY_README.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
