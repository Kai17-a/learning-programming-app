name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: linux-x64
            build_target: ""
            binary_ext: ""
            zip_ext: zip
          - os: windows-latest
            artifact_name: windows-x64
            build_target: ""
            binary_ext: ".exe"
            zip_ext: zip

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-

      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-

      - name: Build release binary
        run: cargo build --release ${{ matrix.build_target }}

      - name: Get project name
        id: project_name
        shell: bash
        run: echo "name=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].name')" >> $GITHUB_OUTPUT

      - name: Create release package
        shell: bash
        run: |
          mkdir -p release-package
          cp "target/release/${{ steps.project_name.outputs.name }}${{ matrix.binary_ext }}" release-package/
          cp README.md release-package/
          cp -r example-go release-package || true
          cd release-package
          zip -r "../${{ steps.project_name.outputs.name }}-${{ github.ref_name }}-${{ matrix.artifact_name }}.${{ matrix.zip_ext }}" .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.project_name.outputs.name }}-${{ matrix.artifact_name }}
          path: ${{ steps.project_name.outputs.name }}-${{ github.ref_name }}-${{ matrix.artifact_name }}.${{ matrix.zip_ext }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Display structure
        run: ls -R ./artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/**/*.zip
          body: |
            ## 使用方法

            ### Linux
            1. バイナリファイルをダウンロード  
            2. 実行権限を付与:  
              ```bash
              chmod +x <ファイル名>
              ```
            3. 実行:  
              ```bash
              ./<ファイル名> --dir /path/to/watch/directory
              ```

            ### Windows
            1. ZIP を展開  
            2. コマンドプロンプトで実行:  
              ```powershell
              .\<ファイル名>.exe --dir "C:\path\to\watch\directory"
              ```

            詳細な使用方法は README.md を参照してください。
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
